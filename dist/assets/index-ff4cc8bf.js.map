{"version":3,"file":"index-ff4cc8bf.js","sources":["../../src/lib/database.js","../../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../../node_modules/@emailjs/browser/es/store/store.js","../../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../../node_modules/@emailjs/browser/es/methods/init/init.js","../../node_modules/@emailjs/browser/es/api/sendPost.js","../../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../../node_modules/@emailjs/browser/es/methods/send/send.js","../../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","../../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../../node_modules/@emailjs/browser/es/index.js"],"sourcesContent":["import { collection, addDoc, getDocs, query, where, serverTimestamp, deleteDoc, doc, onSnapshot, orderBy, updateDoc, getDoc } from 'firebase/firestore';\nimport { db } from './firebase.js';\n\n// Real-time subscriptions\nexport function subscribeToWaitlist(callback) {\n  try {\n    const q = query(\n      collection(db, 'waitlist'), \n      orderBy('joined_at', 'desc')\n    );\n    \n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const users = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        joined_at: doc.data().joined_at?.toDate?.()?.toISOString() || new Date().toISOString()\n      }));\n      callback(users);\n    }, (error) => {\n      console.error('Waitlist subscription error:', error);\n    });\n\n    // Return the unsubscribe function\n    return unsubscribe;\n  } catch (error) {\n    console.error('Error setting up waitlist subscription:', error);\n    // Return a no-op function if setup fails\n    return () => {};\n  }\n}\n\n// Waitlist Operations\nexport async function addToWaitlist(email) {\n  try {\n    // Normalize email to lowercase to prevent case-sensitive duplicates\n    const normalizedEmail = email.toLowerCase().trim();\n    \n    // Check if email exists\n    const emailQuery = query(\n      collection(db, 'waitlist'), \n      where('email', '==', normalizedEmail)\n    );\n    \n    const querySnapshot = await getDocs(emailQuery);\n    \n    // If email exists, return success but with a different status\n    if (!querySnapshot.empty) {\n      return {\n        status: 'already_exists',\n        message: 'You are already on the waitlist! We\\'ll notify you of any updates.',\n        data: {\n          id: querySnapshot.docs[0].id,\n          email: normalizedEmail,\n          joined_at: querySnapshot.docs[0].data().joined_at?.toDate?.()?.toISOString() || new Date().toISOString()\n        }\n      };\n    }\n\n    // Add new user if email doesn't exist\n    const docRef = await addDoc(collection(db, 'waitlist'), {\n      email: normalizedEmail,\n      joined_at: serverTimestamp(),\n      ip: window.sessionStorage.getItem('userIP') || 'unknown',\n      userAgent: navigator.userAgent\n    });\n\n    return {\n      status: 'success',\n      message: 'Successfully joined the waitlist!',\n      data: {\n        id: docRef.id,\n        email: normalizedEmail,\n        joined_at: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    console.error('Error adding to waitlist:', error);\n    throw error;\n  }\n}\n\nexport async function getWaitlistUsers() {\n  try {\n    const q = query(collection(db, 'waitlist'), orderBy('joined_at', 'desc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      joined_at: doc.data().joined_at?.toDate?.()?.toISOString() || new Date().toISOString()\n    }));\n  } catch (error) {\n    console.error('Error getting waitlist users:', error);\n    throw error;\n  }\n}\n\nexport async function deleteWaitlistUser(userId) {\n  try {\n    // First verify admin session\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    // Get user document reference\n    const userRef = doc(db, 'waitlist', userId);\n    \n    // Verify user exists before deleting\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      throw new Error('User not found');\n    }\n\n    // Delete the document\n    await deleteDoc(userRef);\n    return true;\n  } catch (error) {\n    console.error('Error deleting waitlist user:', error);\n    throw error;\n  }\n}\n\n// Updates Operations\nexport async function addUpdate(update) {\n  try {\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    const docRef = await addDoc(collection(db, 'updates'), {\n      title: update.title,\n      content: update.content,\n      image_url: update.image_url || '',\n      created_at: serverTimestamp(),\n      comments: [],\n      author: 'admin'\n    });\n\n    return docRef.id;\n  } catch (error) {\n    console.error('Error adding update:', error);\n    throw error;\n  }\n}\n\nexport async function updateUpdate(updateId, update) {\n  try {\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    const updateRef = doc(db, 'updates', updateId);\n    await updateDoc(updateRef, {\n      title: update.title,\n      content: update.content,\n      image_url: update.image_url || '',\n      updated_at: serverTimestamp()\n    });\n\n    return true;\n  } catch (error) {\n    console.error('Error updating update:', error);\n    throw error;\n  }\n}\n\nexport async function deleteUpdate(updateId) {\n  try {\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    await deleteDoc(doc(db, 'updates', updateId));\n    return true;\n  } catch (error) {\n    console.error('Error deleting update:', error);\n    throw error;\n  }\n}\n\nexport function subscribeToUpdates(callback) {\n  try {\n    const q = query(\n      collection(db, 'updates'), \n      orderBy('created_at', 'desc')\n    );\n    \n    return onSnapshot(q, (snapshot) => {\n      const updates = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          title: data.title || '',\n          content: data.content || '',\n          image_url: data.image_url || '',\n          created_at: data.created_at?.toDate?.()?.toISOString() || new Date().toISOString(),\n          comments: data.comments || [],\n          author: data.author || 'admin'\n        };\n      });\n      callback(updates);\n    });\n  } catch (error) {\n    console.error('Error setting up updates subscription:', error);\n    return () => {};\n  }\n}\n\n// Add this new function for updating user feedback\nexport async function updateUserFeedback(userId, feedback) {\n  try {\n    // Verify admin session first\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    const userRef = doc(db, 'waitlist', userId);\n    \n    // Verify user exists\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      throw new Error('User not found');\n    }\n\n    await updateDoc(userRef, {\n      feedback,\n      feedback_at: serverTimestamp(),\n      updated_by: adminSession.data().timestamp\n    });\n\n    return {\n      id: userId,\n      ...userDoc.data(),\n      feedback,\n      feedback_at: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error updating user feedback:', error);\n    throw error;\n  }\n}\n\n// Add these functions for comment handling\nexport async function addComment(updateId, comment) {\n  try {\n    const updateRef = doc(db, 'updates', updateId);\n    const updateSnapshot = await getDoc(updateRef);\n\n    if (!updateSnapshot.exists()) {\n      throw new Error('Update not found');\n    }\n\n    const newComment = {\n      id: Date.now().toString(),\n      update_id: updateId,\n      user_email: comment.user_email,\n      content: comment.content,\n      created_at: new Date().toISOString(),\n      admin_reply: null,\n      admin_reply_at: null\n    };\n\n    const currentComments = updateSnapshot.data().comments || [];\n    \n    await updateDoc(updateRef, {\n      comments: [...currentComments, newComment]\n    });\n\n    return newComment;\n  } catch (error) {\n    console.error('Error adding comment:', error);\n    throw error;\n  }\n}\n\nexport async function addAdminReply(updateId, commentId, replyContent) {\n  try {\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    const updateRef = doc(db, 'updates', updateId);\n    const updateSnapshot = await getDoc(updateRef);\n\n    if (!updateSnapshot.exists()) {\n      throw new Error('Update not found');\n    }\n\n    const comments = updateSnapshot.data().comments || [];\n    const updatedComments = comments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          admin_reply: replyContent,\n          admin_reply_at: new Date().toISOString()\n        };\n      }\n      return comment;\n    });\n\n    await updateDoc(updateRef, { comments: updatedComments });\n    return true;\n  } catch (error) {\n    console.error('Error adding admin reply:', error);\n    throw error;\n  }\n}\n\nexport async function deleteComment(updateId, commentId) {\n  try {\n    const adminSession = await getDoc(doc(db, 'admin_sessions', 'current'));\n    if (!adminSession.exists() || !adminSession.data().authenticated) {\n      throw new Error('Unauthorized');\n    }\n\n    const updateRef = doc(db, 'updates', updateId);\n    const updateSnapshot = await getDoc(updateRef);\n\n    if (!updateSnapshot.exists()) {\n      throw new Error('Update not found');\n    }\n\n    const comments = updateSnapshot.data().comments || [];\n    const updatedComments = comments.filter(comment => comment.id !== commentId);\n\n    await updateDoc(updateRef, { \n      comments: updatedComments,\n      lastModified: new Date().toISOString()\n    });\n\n    return true;\n  } catch (error) {\n    console.error('Error deleting comment:', error);\n    throw error;\n  }\n} ","export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n"],"names":["subscribeToWaitlist","callback","q","query","collection","db","orderBy","onSnapshot","snapshot","users","doc","_c","_b","_a","error","addToWaitlist","email","normalizedEmail","emailQuery","where","querySnapshot","getDocs","addDoc","serverTimestamp","deleteWaitlistUser","userId","adminSession","getDoc","userRef","deleteDoc","addUpdate","update","updateUpdate","updateId","updateRef","updateDoc","deleteUpdate","subscribeToUpdates","updates","data","updateUserFeedback","feedback","userDoc","addComment","comment","updateSnapshot","newComment","currentComments","addAdminReply","commentId","replyContent","updatedComments","deleteComment","EmailJSResponseStatus","_status","_text","createWebStorage","key","value","store","buildOptions","options","init","origin","opts","sendPost","url","headers","response","message","responseStatus","validateParams","publicKey","serviceID","templateID","validateTemplateParams","templateParams","isHeadless","navigator","headlessError","validateBlockListParams","list","watchVariable","isBlockListDisabled","getValue","name","isBlockedValueInParams","params","blockedEmailError","validateLimitRateParams","throttle","id","getLeftTime","storage","lastTime","isLimitRateHit","defaultID","limitRateError","send","blockHeadless","storageProvider","blockList","limitRate","validateForm","form","findHTMLForm","sendForm","currentForm","formData","emailjs"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}